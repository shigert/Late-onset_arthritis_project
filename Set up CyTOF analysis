# --- 1. Load Libraries ---
# Load all necessary packages for the analysis.
library(Seurat)
library(flowCore)
library(dplyr)
library(ggplot2)
library(clustree)
library(tidyr)
library(broom)
library(ggsci)
library(rstatix)
library(ggpubr)

# --- 2. Load and Preprocess FCS Data ---
# Define the directory containing the FCS files.
fcs_dir <- "FCS_DIRECTORY"
fcs_files <- list.files(fcs_dir, pattern = "\\.fcs$", full.names = TRUE)

# Set a random seed for reproducibility.
set.seed(123) 
# Read FCS files into a list of flowFrames.
# Downsample files with more than 100,000 events to ensure computational feasibility.
flow_list <- lapply(fcs_files, function(file_path) {
  ff <- read.FCS(file_path, transformation = FALSE, truncate_max_range = FALSE)
  num_events <- nrow(ff)
  
  if (num_events > 100000) {
    cat(paste("Downsampling:", basename(file_path), "from", num_events, "to 100000 events.\n"))
    indices <- sample(1:num_events, 100000)
    ff_sampled <- ff[indices, ]
    return(ff_sampled)
  } else {
    cat(paste("Keeping all", num_events, "events from:", basename(file_path), ".\n"))
    return(ff)
  }
})

# Combine the list of flowFrames into a single flowSet.
flow_set <- as(flow_list, "flowSet")
sampleNames(flow_set) <- basename(fcs_files)

# Extract the expression data from the flowSet.
expression_matrix <- fsApply(flow_set, exprs)

# --- 3. Create Seurat Object and Add Metadata ---
# Load metadata from an external text file.
metadata_df <- read.table("YOURMETADATA.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE) 
# Create a metadata data frame for each individual cell.
sample_ids <- rep(sampleNames(flow_set), fsApply(flow_set, nrow))

cell_metadata <- data.frame(FileName = sample_ids) %>%
  left_join(metadata_df, by = "FileName")

# Assign unique IDs to each cell and set them as row names for the matrix and metadata.
num_cells <- nrow(expression_matrix)
cell_ids <- paste0("cell_", 1:num_cells)
rownames(expression_matrix) <- cell_ids
rownames(cell_metadata) <- cell_ids

# Create the Seurat object. Note: expression matrix is transposed for Seurat.
cytof_seurat <- CreateSeuratObject(counts = t(expression_matrix), meta.data = cell_metadata)

# --- 4. Rename Markers and Normalize Data ---
# Read a mapping file to rename FCS channel names to proper antigen names.
marker_map_file <- "YOURLIST.txt" 
marker_mapping <- read.table(marker_map_file, header = TRUE, sep = "\t", stringsAsFactors = FALSE)

# Create a named vector for easy renaming.
feature_rename_map <- setNames(marker_mapping$antigen, marker_mapping$fcs_colname)

# Apply the new names to the Seurat object.
new_feature_names <- sapply(rownames(cytof_seurat), function(name) {
  feature_rename_map[name]
}, USE.NAMES = FALSE)
rownames(cytof_seurat[["CyTOF"]]) <- new_feature_names

# Apply arcsinh transformation, a standard for CyTOF data, and scale the data.
cofactor <- 5
cytof_seurat@assays$CyTOF$data <- asinh(cytof_seurat@assays$CyTOF$counts / cofactor)
all_markers <- rownames(cytof_seurat)
cytof_seurat <- ScaleData(cytof_seurat, features = all_markers)

# --- 5. Batch Correction and Dimensionality Reduction ---
# Run Principal Component Analysis (PCA).
cytof_seurat <- RunPCA(
  cytof_seurat,
  features = all_markers,
  npcs = length(all_markers), 
  approx = FALSE,            
  verbose = FALSE
)

# Run Harmony to integrate data and correct for batch effects related to PatientID.
pca_embeddings <- Embeddings(cytof_seurat, "pca")
meta_data <- cytof_seurat@meta.data
harmony_embeddings <- harmony::RunHarmony(
  data_mat = pca_embeddings,
  meta_data = meta_data,
  vars_use = "PatientID" 
)

# Add the Harmony-corrected embeddings back to the Seurat object.
rownames(harmony_embeddings) <- rownames(pca_embeddings) 
cytof_seurat[["harmony"]] <- CreateDimReducObject(
  embeddings = harmony_embeddings, 
  key = "harmony_", 
  assay = "CyTOF"
)

# --- 6. Clustering and Visualization ---
# Run UMAP, find neighbors, and cluster cells using the Harmony-corrected dimensions.
cytof_seurat <- RunUMAP(cytof_seurat, reduction = "harmony", dims = 1:15)
cytof_seurat <- FindNeighbors(cytof_seurat, reduction = "harmony", dims = 1:15)

# Use clustree to visualize clustering stability across different resolutions.
res <- seq(0, 1, 0.1)
for (i in 1:length(res)) {
  cytof_seurat <- FindClusters(cytof_seurat, resolution = res[i])
}
clustree(cytof_seurat, prefix = "CyTOF_snn_res.") 

# Set the final clustering resolution.
cytof_seurat <- FindClusters(cytof_seurat, resolution = 0.2)

# Compare UMAP plots before and after Harmony correction.
p1 <- DimPlot(cytof_seurat, reduction = "umap", label = TRUE) + NoLegend() + ggtitle("After Harmony")
p2 <- DimPlot(cytof_seurat, reduction = "umap", group.by = "PatientID") + NoLegend() + ggtitle("After Harmony (by Patient)")
cytof_seurat <- RunUMAP(cytof_seurat, reduction = "pca", dims = 1:15, reduction.name = "umap_original")
p3 <- DimPlot(cytof_seurat, reduction = "umap_original", group.by = "PatientID") + NoLegend() + ggtitle("Before Harmony (by Patient)")
p3 | p2

# --- 7. Cluster Annotation ---
# Set the order for staining conditions.
cytof_seurat$Staining <- factor(x = cytof_seurat$Staining, levels = c("regular", "stain-then-freeze"))

# Prepare data layers and find markers for each cluster.
cytof_seurat <- JoinLayers(cytof_seurat) 
markers <- FindAllMarkers(cytof_seurat, min.pct = 0.25, only.pos = TRUE, logfc.threshold = 0.5) 

# Create a violin plot to visualize key marker expression across clusters.
v <- VlnPlot(cytof_seurat, features = c("CD3", "CD4", "CD8a", "CD14", "CD16", "CD19", "CD56", "CD66b", "TCRgd", "IL3R", "CD11c"), pt.size = 0, stack = T, flip = T) + NoLegend()
v_modified <- v + labs(x = NULL) + theme(text = element_text(size = 8), axis.text = element_text(size = 8))
print(v_modified)

# Define new cluster names based on marker expression.
new.cluster.ids <- c('Neutrophil', 'Neutrophil', 'Monocyte', 'CD4+ T cell', 'CD8+ T cell', 'Neutrophil', 'CD4+ T cell', 'CD8+ T cell', 'B cell', 'gd T cell', 'Neutrophil')
names(new.cluster.ids) <- levels(cytof_seurat)
cytof_seurat <- RenameIdents(cytof_seurat, new.cluster.ids)

# Visualize the annotated clusters on a UMAP, split by staining condition.
d <- DimPlot(cytof_seurat, reduction = "umap", label = F, split.by = "Staining") 
d_modified <- d + theme(text = element_text(size = 8), axis.text = element_text(size = 8))
print(d_modified)
ggsave("FigureS1A.pdf", plot = d_modified, width = 3.5, height = 2, units = "in")

# --- 8. Compositional Analysis (All Cells) ---
# Calculate cell counts and proportions for each cluster, patient, and condition.
meta_data <- cytof_seurat@meta.data
meta_data$Cluster <- cytof_seurat@active.ident
cell_counts <- meta_data %>%
  group_by(PatientID, Staining, Cluster) %>%
  summarise(CellCount = n(), .groups = 'drop') %>%
  complete(PatientID, Cluster, fill = list(CellCount = 0)) %>%
  group_by(PatientID) %>%
  fill(Staining, .direction = "downup") %>%
  ungroup()

proportion_per_sample_df <- cell_counts %>%
  group_by(PatientID) %>%
  mutate(TotalCellsInSample = sum(CellCount), Proportion = CellCount / TotalCellsInSample) %>%
  ungroup()

# Perform ANOVA to test for significant differences in proportions between staining conditions for each cluster.
anova_results_list_robust <- list()
for (cluster_id in unique(proportion_per_sample_df$Cluster)) {
  cluster_data <- proportion_per_sample_df %>% filter(Cluster == cluster_id)
  anova_model <- aov(Proportion ~ Staining, data = cluster_data)
  anova_summary <- summary(anova_model)
  anova_results_list_robust[[as.character(cluster_id)]] <- anova_summary
  
  cat("=========================================================\n")
  cat(" Robust ANOVA Results for:", as.character(cluster_id), "\n")
  print(anova_summary)
  
  p_value <- anova_summary[[1]][["Pr(>F)"]][1]
  if (!is.na(p_value) && p_value < 0.05) {
    cat("\n--- Tukey's HSD Post-hoc Test ---\n")
    tukey_result <- TukeyHSD(anova_model)
    print(tukey_result)
  }
}

# Create a stacked bar plot showing the percentage of each cluster per patient.
count_df <- meta_data %>% count(Staining, PatientID, Cluster)
p2 <- ggplot(count_df, aes(x = PatientID, y = n, fill = Cluster)) +
  geom_bar(stat = "identity", position = "fill") +
  facet_grid(~ Staining, scales = "free_x", space = "free_x") +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(x = "Patient ID", y = "%", fill = "Cluster") +
  theme_classic() +
  theme(strip.background = element_rect(fill = "grey90", color = NA), axis.text.x = element_text(angle = 45, hjust = 1, size = 8, color = 'black'), axis.text.y = element_text(size = 8, color = 'black'), axis.title.y = element_text(size = 8, color = 'black'), legend.position = 'none')
print(p2)
ggsave("FigureS1C.pdf", plot = p2, width = 3.5, height = 2, units = "in")

# --- 9. Plotting Compositional Analysis with Stats ---
# Convert proportions to percentages for plotting.
proportion_per_sample_df <- proportion_per_sample_df %>% mutate(Percentage = Proportion * 100)

# Prepare statistical test results for plotting with ggpubr.
stat_test_adjusted <- proportion_per_sample_df %>%
  group_by(Cluster) %>%
  tukey_hsd(Percentage ~ Staining) %>%
  add_significance("p.adj") %>%
  add_xy_position(x = "Staining")

# Create a bar plot with jitter points and error bars, showing statistical significance.
b <- ggplot(proportion_per_sample_df, aes(x = Staining, y = Percentage, fill = Staining)) +
  stat_summary(fun = "mean", geom = "bar", alpha = 0.6, color = "black") +
  stat_summary(fun.data = "mean_se", geom = "errorbar", width = 0.2) +
  geom_jitter(width = 0.2, shape = 21, size = 1.8, stroke = 0.5, fill = "white") +
  stat_pvalue_manual(stat_test_adjusted, label = "p.adj.signif", tip.length = 0.01, hide.ns = TRUE) +
  facet_wrap(~ Cluster, scales = "free_y", nrow = 2) +
  scale_y_continuous(expand = expansion(mult = c(0.05, 0.1))) +
  labs(x = NULL, y = "%") +
  theme_classic() +
  scale_fill_jama() +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), strip.background = element_blank(), strip.text = element_text(size = 8))
print(b)
ggsave("Figure1C.pdf", plot = b, width = 8, height = 3, units = "in")

##############################
######### T-cell Analysis ######
##############################

# --- 10. Subset T cells for Deeper Analysis ---
# Subset the Seurat object to include only CD4+ and CD8+ T cells.
tcell_seurat <- subset(cytof_seurat, idents = c("CD4+ T cell", "CD8+ T cell"))

# --- 11. Re-run PCA, Harmony, and Clustering on T-cell Subset ---
# Repeat the entire integration and clustering pipeline for the T-cell subset.
all_markers <- rownames(tcell_seurat)
tcell_seurat <- RunPCA(tcell_seurat, features = all_markers, npcs = length(all_markers), verbose = FALSE, approx = FALSE)

pca_embeddings_tcell <- Embeddings(tcell_seurat, "pca")
meta_data_tcell <- tcell_seurat@meta.data
harmony_embeddings_tcell <- harmony::RunHarmony(data_mat = pca_embeddings_tcell, meta_data = meta_data_tcell, vars_use = "PatientID")

tcell_seurat[["harmony_tcell"]] <- CreateDimReducObject(embeddings = harmony_embeddings_tcell, key = "harmonyT_", assay = DefaultAssay(tcell_seurat))

tcell_seurat <- RunUMAP(tcell_seurat, reduction = "harmony_tcell", dims = 1:15)
tcell_seurat <- FindNeighbors(tcell_seurat, reduction = "harmony_tcell", dims = 1:15)

# Use clustree again to determine the optimal resolution for T-cell clusters.
res <- seq(0, 1, 0.1)
for (i in 1:length(res)) {
  tcell_seurat <- FindClusters(tcell_seurat, resolution = res[i])
}
clustree(tcell_seurat, prefix = "CyTOF_snn_res.") 
tcell_seurat <- FindClusters(tcell_seurat, resolution = 0.5)
DimPlot(tcell_seurat, reduction = "umap", label = TRUE) + NoLegend()

# --- 12. Annotate T-cell Clusters ---
# Visualize T-cell specific marker expression.
v2 <- VlnPlot(tcell_seurat, features = c("CD38", "CD56", "TCRgd", "CCR7", "CD161", "CD25", "CD57", "CXCR3", "CXCR5", "CD28", "PD-1", "CD4", "CD8a", "CD45RA", "CCR6", "CD45RO", "CCR4", "CD27", "HLA-DR", "CD127"), pt.size = 0, stack = T, flip = T) + NoLegend()
v2_modified <- v2 + labs(x = NULL) + theme(text = element_text(size = 8), axis.text = element_text(size = 8))
print(v2_modified)

# Find markers for the new T-cell clusters.
tcell_seurat <- JoinLayers(tcell_seurat) 
tmarkers <- FindAllMarkers(tcell_seurat, min.pct = 0.25, only.pos = TRUE, logfc.threshold = 0.5) 

# Rename T-cell clusters based on their marker profiles.
new.cluster.ids <- c('Activated CD8T', 'CCR4+ CD4T', 'CD57+ CD8T', 'Th17', 'Th17', 'CM CD4T', 'Naive CD8T', 'Th17', 'Naive CD8T', 'Naive CD8T', 'CD57+ CD4T', 'CD161+ CD8T', 'Treg', 'CXCR5+ CD8T', 'CD56+ CD8T', 'Naive-like CD4T', 'CD56+ CD8T')
names(new.cluster.ids) <- levels(tcell_seurat)
tcell_seurat <- RenameIdents(tcell_seurat, new.cluster.ids)

# Visualize annotated T-cell clusters.
d <- DimPlot(tcell_seurat, reduction = "umap", label = F, split.by = "Staining") 
d_modified <- d + theme(text = element_text(size = 8), axis.text = element_text(size = 8))
print(d_modified)
ggsave("FigureS1E.pdf", plot = d_modified, width = 3.5, height = 1.8, units = "in")

# --- 13. Compositional Analysis (T-cell Subset) ---
# Repeat the compositional analysis for the T-cell sub-clusters.
# First, create a stacked bar plot.
count_df <- data.frame(Cluster = Idents(tcell_seurat), PatientID = tcell_seurat$PatientID, Staining = tcell_seurat$Staining) %>% count(Staining, PatientID, Cluster)
p4 <- ggplot(count_df, aes(x = PatientID, y = n, fill = Cluster)) +
  geom_bar(stat = "identity", position = "fill") +
  facet_grid(~ Staining, scales = "free_x", space = "free_x") +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(x = "Patient ID", y = "%", fill = "Cluster") +
  theme_classic() +
  theme(strip.background = element_rect(fill = "grey90", color = NA), axis.text.x = element_text(angle = 45, hjust = 1, size = 8, color = 'black'), axis.text.y = element_text(size = 8, color = 'black'), legend.position = 'none')
print(p4)
ggsave("FigureS1F.pdf", plot = p4, width = 3.5, height = 2, units = "in")

# Calculate proportions and run ANOVA for T-cell subsets.
meta_data <- tcell_seurat@meta.data
meta_data$Cluster <- tcell_seurat@active.ident
cell_counts <- meta_data %>%
  group_by(PatientID, Staining, Cluster) %>%
  summarise(CellCount = n(), .groups = 'drop') %>%
  complete(PatientID, Cluster, fill = list(CellCount = 0)) %>%
  group_by(PatientID) %>%
  fill(Staining, .direction = "downup") %>%
  ungroup()

proportion_per_sample_df <- cell_counts %>%
  group_by(PatientID) %>%
  mutate(TotalCellsInSample = sum(CellCount), Proportion = CellCount / TotalCellsInSample) %>%
  ungroup()

# Loop through each T-cell cluster and perform ANOVA.
for (cluster_id in unique(proportion_per_sample_df$Cluster)) {
  cluster_data <- proportion_per_sample_df %>% filter(Cluster == cluster_id)
  anova_model <- aov(Proportion ~ Staining, data = cluster_data)
  anova_summary <- summary(anova_model)
  
  cat("=========================================================\n")
  cat(" Robust ANOVA Results for T-cell cluster:", as.character(cluster_id), "\n")
  print(anova_summary)
  
  p_value <- anova_summary[[1]][["Pr(>F)"]][1]
  if (!is.na(p_value) && p_value < 0.05) {
    cat("\n--- Tukey's HSD Post-hoc Test ---\n")
    tukey_result <- TukeyHSD(anova_model)
    print(tukey_result)
  }
}
